#
# This is a Flox environment manifest.
# Visit flox.dev/docs/concepts/manifest/
# or see flox-edit(1), manifest.toml(5) for more information.
#
# Flox manifest version managed by Flox CLI
version = 1

# List packages you wish to install in your environment inside
# the `[install]` section.
[install]
nodejs_22.pkg-path = "nodejs_22"
yarn.pkg-path = "yarn"
# hello.pkg-path = "hello"
# nodejs = { version = "^20.15.1", pkg-path = "nodejs" }

# Set environment variables in the `[vars]` section. These variables may not
# reference one another, and are added to the environment without first
# expanding them. They are available for use in the `[profile]` and `[hook]`
# scripts.
[vars]
# message = "Howdy"
FLOX_DISABLE_METRICS="true"
CLICOLOR="1"

# The `hook.on-activate` script is run by the *bash* shell immediately upon
# activating an environment, and will not be invoked if Flox detects that the
# environment has previously been activated. Variables set by the script will
# be inherited by `[profile]` scripts defined below. Note that any stdout
# generated by the script will be redirected to stderr.
[hook]
on-activate = '''
echo "##################################################";
echo "########## FLOX ACTIVATE...";

PWD=$(pwd);
echo "-----> PWD: ${PWD}";

#_FLOX_ENV_LOG_DIR
FLOX_ENV_DIR="$(dirname ${FLOX_ENV_CACHE})"
echo "-----> FLOX_ENV_DIR: ${FLOX_ENV_DIR}";

echo "=====> NODE VERSION: $(node --version)";
WHICH_NODE=$(which node);
echo ".....> NODE WHICH: ${WHICH_NODE}";
ls -alshF --color=auto "${WHICH_NODE}";

echo "=====> NPM VERSION (init): $(npm --version)";
WHICH_NPM=$(which npm);
echo ".....> NPM WHICH: ${WHICH_NPM}";
ls -alshF --color=auto "${WHICH_NPM}";

echo "=====> YARN VERSION: $(yarn --version)";
WHICH_YARN=$(which yarn);
echo ".....> YARN WHICH: ${WHICH_YARN}";
ls -alshF --color=auto "${WHICH_YARN}";

echo "-----> NPM CONFIG PREFIX (init): $(npm config get prefix)";
echo "-----> NPM_CONFIG_PREFIX (init): ${NPM_CONFIG_PREFIX}";

echo "-----> NPM CONFIG CACHE (init): $(npm config get cache)"
echo "-----> NPM_CONFIG_CACHE (init): ${NPM_CONFIG_CACHE}";

export YARN_CACHE_DIR="${FLOX_ENV_DIR}/YARN_CACHE";
export YARN_CACHE_FOLDER="${YARN_CACHE_DIR}";
yarn config set cache-folder "${YARN_CACHE_DIR}";

echo "-----> YARN CACHE DIR: $(yarn cache dir)";
echo "-----> YARN_CACHE_DIR: ${YARN_CACHE_DIR}";
echo "-----> YARN_CACHE_FOLDER: ${YARN_CACHE_FOLDER}";

# envName="${_FLOX_ACTIVE_ENVIRONMENTS##:*}";
#echo "${envName}";
#export NPM_CONFIG_PREFIX="/tmp/${envName}-npm";

export NPM_CONFIG_PREFIX="${FLOX_ENV_DIR}/NPM_PREFIX";
echo "-----> NPM CONFIG PREFIX: $(npm config get prefix)";
echo "-----> NPM_CONFIG_PREFIX: ${NPM_CONFIG_PREFIX}";
#### rm -rf "$NPM_CONFIG_PREFIX";
mkdir -p "$NPM_CONFIG_PREFIX";
ls -alshF --color=auto "$NPM_CONFIG_PREFIX";
ls -alshF --color=auto "$NPM_CONFIG_PREFIX/bin";
ls -alshF --color=auto "$NPM_CONFIG_PREFIX/lib";
ls -alshF --color=auto "$NPM_CONFIG_PREFIX/lib/node_modules";

export NPM_CONFIG_CACHE="${FLOX_ENV_DIR}/NPM_CACHE";
echo "-----> NPM CONFIG CACHE: $(npm config get cache)"
echo "-----> NPM_CONFIG_CACHE: ${NPM_CONFIG_CACHE}";
#### rm -rf "$NPM_CONFIG_CACHE";
mkdir -p "$NPM_CONFIG_CACHE";
ls -alshF --color=auto "$NPM_CONFIG_CACHE";

echo "-----> NODE_PATH (init): ${NODE_PATH}";
export NODE_PATH="$NPM_CONFIG_PREFIX/lib/node_modules${NODE_PATH:+:$NODE_PATH}";
echo "-----> NODE_PATH: ${NODE_PATH}";

export PATH="$NPM_CONFIG_PREFIX/bin:$PATH";

npm install -g npm
npm install -g npm-check-updates
'''
# on-activate = '''
#   # Set variables, create files and directories
#   venv_dir="$(mktemp -d)"
#   export venv_dir
#
#   # Perform initialization steps, e.g. create a python venv
#   python -m venv "$venv_dir"
# '''

# Scripts defined in the `[profile]` section are *sourced* by *your shell* and
# inherit environment variables set in the `[vars]` section and by `[hook]` scripts.
# The `profile.common` script is sourced by all shells and special care should be
# taken to ensure compatibility with all shells, after which exactly one of
# `profile.{bash,fish,tcsh,zsh}` is sourced by the corresponding shell.
[profile]
# common = '''
#   echo "it's gettin' flox in here"
# '''
common = '''
echo "##################################################";
echo "########## FLOX PROFILE COMMON (${SHELL})...";

PWD=$(pwd);
echo "-----> PWD: ${PWD}";

echo "=====> NODE VERSION: $(node --version)";
WHICH_NODE=$(which node);
echo ".....> NODE WHICH: ${WHICH_NODE}";
ls -alshF --color=auto "${WHICH_NODE}";

echo "=====> NPM VERSION: $(npm --version)";
WHICH_NPM=$(which npm);
echo ".....> NPM WHICH: ${WHICH_NPM}";
ls -alshF --color=auto "${WHICH_NPM}";

echo "=====> YARN VERSION: $(yarn --version)";
WHICH_YARN=$(which yarn);
echo ".....> YARN WHICH: ${WHICH_YARN}";
ls -alshF --color=auto "${WHICH_YARN}";

echo "-----> NPM CONFIG PREFIX: $(npm config get prefix)";
echo "-----> NPM_CONFIG_PREFIX: ${NPM_CONFIG_PREFIX}";

echo "-----> NPM CONFIG CACHE: $(npm config get cache)";
echo "-----> NPM_CONFIG_CACHE: ${NPM_CONFIG_CACHE}";

echo "-----> YARN CACHE DIR: $(yarn cache dir)";
echo "-----> YARN_CACHE_DIR: ${YARN_CACHE_DIR}";
echo "-----> YARN_CACHE_FOLDER: ${YARN_CACHE_FOLDER}";

echo "=====> NCU VERSION: $(ncu --version)";
WHICH_NCU=$(which ncu);
echo ".....> NCU WHICH: ${WHICH_NCU}";
ls -alshF --color=auto "${WHICH_NCU}";

echo "=====> GIT VERSION: $(git --version)";
WHICH_GIT=$(which git);
echo ".....> GIT WHICH: ${WHICH_GIT}";
ls -alshF --color=auto "${WHICH_GIT}";

ENV=$(env);
echo "-----> ENV: ${ENV}";
echo "||||||||||||||||||||||||||";

echo "-----> DEBUG: ${DEBUG}";

echo "-----> USER: ${USER}";
echo "-----> USERNAME: ${USERNAME}";

echo "-----> NODE_ENV: ${NODE_ENV}";

git branch
git status
'''

# The `[services]` section of the manifest allows you to define services.
# Services defined here use the packages provided by the `[install]` section
# and any variables you've defined in the `[vars]` section or `hook.on-activate` script.
[services]
# postgres.command = "postgres --config-file=pg.conf"

# Additional options can be set in the `[options]` section. Refer to
# manifest.toml(5) for a list of available options.
[options]
systems = ["aarch64-darwin", "aarch64-linux", "x86_64-darwin", "x86_64-linux"]
# Uncomment to disable CUDA detection.
# cuda-detection = false
